.\" Extracted by src2man from ../src/lib/refc.c
.\" Text automatically generated by txt2man
.TH rc_alloc 3 "11 March 2021" "librefc" ""
.SH NAME
\fBrc_alloc \fP- reference counted allocator
.SH SYNOPSIS
.nf
.fam C
void* \fBrc_alloc\fP(size_t \fIsize\fP, finalizer_t \fIfinalizer\fP, destructor_t \fIdestructor\fP);
.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
rc_alloc defines a \fIsize\fP bytes long region of memory with book-keeping data
such that the number of references can be tallied manually during runtime
using \fBretain\fP(void*) and \fBrelease\fP(void*).
.PP
\fIsize\fP is the number of bytes to allocate for the memory object. \fIfinalizer\fP is
a function (or NULL) that will be run on the object before it is collected.
\fIdestructor\fP is the collection function, which will default to \fBfree\fP() if NULL.
.SH MACROS
You may opt to use \fBNEW\fP(type, \fIfinalizer\fP, \fIdestructor\fP), which performs same
action as rc_alloc, but infers the \fIsize\fP automatically from the type.
.SH WARNINGS
Do not attempt to \fBfree\fP(3) a pointer returned from rc_alloc. Instead, call
\fBrelease\fP(3).
.SH SEE ALSO
\fBretain\fP(3), \fBrelease\fP(3), \fBset_destructor\fP(3), \fBset_finalizer\fP(3) 
.SH AUTHORS
james lay <james@jlmgtech.com>
.SH FILE
../src/lib/refc.c
